<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link
        href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap"
        rel="stylesheet">
    <link rel="stylesheet" href="/public/css/index.css">
    <title>Чат</title>
</head>

<body>
    <!-- форма для отправки сообщений -->
    <form name="publish">
        <input type="hidden" name="roomId" value="{{roomId}}">
        <a>Ник:</a>
        <textarea name="nick" id="nick-area" required></textarea>

        <a>Ключ шифрования:</a>
        <textarea name="key" id="key-area"></textarea>
        <label><input type="checkbox" id="save-key-checkbox">Сохранить ключ в LocalStorage</label>
        <button id="delete-key-button" onclick="removeKeyFromLocalStorage()" type="button">Удалить ключ из LocalStorage</button>
        <button id="apply-key-button" onclick="decryptMessages()" type="button">Расшифровать сообщения</button> <!--Do not remove type="button", it will cause message to be sent together with decryption!-->
        <button id="decrypt-keys-button" onclick="decryptKeys()" type="button">Расшифровать ключи из LocalStorage</button>
        <button id="set-password-button" onclick="setPassword()" type="button">Установить пароль</button>

        <a>Сообщение:</a>
        <textarea name="message" id="message-area" required></textarea>
        <button type="submit" id="message-submit-button">Отправить</button>
    </form>
    
    <!-- здесь будут появляться входящие сообщения -->
    <div id="subscribe">
        <div id="subscribe-empty-reminder" v-if="!messageList.length && showEmptySubscribeFeedMessage">Здесь будут появляться новые сообщения. Пока что тут ничего нет.</div>
        <div id="reply-list-div" v-if="this.replyList.length">В этом сообщении вы отвечаете на: { replyList.join(', ') } <a v-on:click="clearReplyList()" href="#">Отменить</a> </div>
        <div v-for="item in messageList" v-html="item.html" class="message"></div>
    </div>

    <script src="https://unpkg.com/vue@next"></script>
    <script src="/public/vue-app.js"></script>
    <script src="/public/cryptojs/aes.js"></script>
    <script src="/public/cryptojs/sha256.js"></script>
    <script src="/public/browser.js"></script>

    <script>
        let saveKeyCheckbox = document.getElementById("save-key-checkbox");
        saveKeyCheckbox.addEventListener("click", warnAboutKeyStorage);
        function warnAboutKeyStorage(event)
        {
            let result = false;
            if (!saveKeyCheckbox.checked) return; //do NOT remove exclamation mark.        
            let confirmResult = confirm("При выборе этого пункта, введенный в поле ключ шифрования будет записываться в LocalStorage в зашифрованном виде. Для его расшифровки будет нужен пароль, который будет запрошен позже и не будет сохраняться или отправляться на сервер. Внутри сессии хэш пароля будет сохранен в sessionStorage вашего браузера.\n\nПри утере пароля восстановить его будет невозможно! Для продолжения нажмите ОК.");
            if (!confirmResult) return false;
            if (!sessionStorage.passwordHash && confirmResult)
            {                
                result = setPassword();
                if (result) decryptKeys();
            }
            else if (sessionStorage.passwordHash) result = true;
            saveKeyCheckbox.checked = result;
            saveKeys();
        }

        function setPassword()
        {
            let pass = CryptoJS.SHA256(prompt("Введите пароль, который будет использоваться для шифрования ключа")).toString();
            let conf = CryptoJS.SHA256(prompt("Введите пароль ещё раз")).toString();
            if (pass != conf) 
            {
                alert("Введенные пароли не совпадают.");
                return false;
            }
            sessionStorage.passwordHash = pass;
            alert("Пароль успешно установлен.");
            return true;
        }

        function decryptKeys()
        {
            try 
            {
                if (!localStorage.savedKey) alert("В localStorage нет ключей.");
                if (!sessionStorage.passwordHash)
                {
                    let result = confirm("Пароль для шифрования ключей не установлен. Установить сейчас?");
                    if (result)
                        if (!setPassword()) return;
                }
                document.forms.publish.key.value = CryptoJS.AES.decrypt(localStorage.savedKey, sessionStorage.passwordHash).toString(CryptoJS.enc.Utf8);
            }
            catch (err)
            {
                alert("Ошибка при расшифровке ключей: "+err);
            }
        }

        function saveKeys()
        {
            try 
            {
                let key = document.forms.publish.key.value;
                if (!sessionStorage.passwordHash || !key) return;
                localStorage.savedKey = CryptoJS.AES.encrypt(key,sessionStorage.passwordHash);
            }
            catch (err)
            {
                console.error("Error saving key: ",err)
            }
        }
        function removeKeyFromLocalStorage()
        {
            if (confirm("Вы действительно хотите удалить сохранённый ключ?\n\nВНИМАНИЕ: если ключ будет утерян, то зашифрованные им сообщения расшифровать будет невозможно. После подтверждения ключ будет удалён из LocalStorage, но останется в поле для ввода. Если он у вас не сохранён где-либо ещё, обязательно сохраните его сразу после закрытия этого сообщения.")) localStorage.removeItem('savedKey');
        }
    </script>
</body>